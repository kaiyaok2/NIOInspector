package edu.illinois.NIOInspector.plugin.util.extractors;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.maven.plugin.MojoExecutionException;

/**
 * Support finding the most recent log generated by the rerun Mojo.
 */
public class MostRecentLogFinder {

    private static final Logger logger = LoggerFactory.getLogger(MostRecentLogFinder.class);
    
    private static final String LOG_DIRECTORY = ".NIOInspector";

    /**
     * Find the most recent log file generated by the rerun Mojo
     * @return The most recent log file found
     * @throws MojoExecutionException if failed to find a log file in the most recent directory
     */
    public static File findMostRecentLog() throws MojoExecutionException{
        File logDirectory = new File(LOG_DIRECTORY);
        File logFile = null;

        // List all time-base named subdirectories in the .NIOInspector directory
        File[] subdirectories = logDirectory.listFiles(File::isDirectory);

        if (subdirectories != null) {
            // Sort subdirectories by timestamp (descending order)
            Arrays.sort(subdirectories, Comparator.comparingLong(MostRecentLogFinder::getTimestampFromDirectory).reversed());

            // Get the most recent directory
            File mostRecentDirectory = subdirectories[0];

            // Find the rerun-results.log file in the most recent directory
            Optional<File> rerunResultsLogFileOptional = Arrays.stream(mostRecentDirectory.listFiles())
                    .filter(file -> file.getName().equals("rerun-results.log"))
                    .findFirst();

            // Cast Optional<File> to File or throw exception if casting fails
            logFile = rerunResultsLogFileOptional.orElseThrow(() ->
                    new MojoExecutionException("Failed to find a recent rerun-results.log file"));
        }

        return logFile;
    }

    /**
     * Get time stamp from the time-based directory name
     * @param directory The directory with time-based name
     * @return A comparable time stamp
     */
    public static long getTimestampFromDirectory(File directory) {
        try {
            String timeBasedFileName = directory.getName();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
            Date creationTime = dateFormat.parse(timeBasedFileName);
            return creationTime.getTime();
        } catch (Exception e) {
            logger.error("Error parsing timestamp for directory: " + directory.getPath(), e);
            return 0;
        }
    }
}
